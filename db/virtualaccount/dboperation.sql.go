// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: dboperation.sql

package virtualaccount

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
update accountinfo set balance = balance + $3,version=version+1 where account_id=$1 and version=$2
RETURNING account_id, balance, created_at, version
`

type AddAccountBalanceParams struct {
	AccountID string
	Version   int32
	Balance   string
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Accountinfo, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.AccountID, arg.Version, arg.Balance)
	var i Accountinfo
	err := row.Scan(
		&i.AccountID,
		&i.Balance,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const closeSymbol = `-- name: CloseSymbol :exec
Delete FROM hold_symbol
where quantity=0
`

func (q *Queries) CloseSymbol(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, closeSymbol)
	return err
}

const closeTask = `-- name: CloseTask :exec
DELETE FROM processing_task
WHERE processing_task.task_id = $1 and
(
 select sum(quantity)=
    (select quantity from his_buy where his_buy.task_id=$1) as close_task
from his_sell
where his_sell.task_id=$1)
`

func (q *Queries) CloseTask(ctx context.Context, taskID string) error {
	_, err := q.db.ExecContext(ctx, closeTask, taskID)
	return err
}

const createHisBuy = `-- name: CreateHisBuy :one
insert into his_buy (task_id,account_id,symbol,buy_price,quantity,"trigger")
values ($1,$2,$3,$4,$5,$6)
RETURNING task_id, symbol, account_id, buy_price, quantity, trigger, created_at
`

type CreateHisBuyParams struct {
	TaskID    string
	AccountID string
	Symbol    string
	BuyPrice  string
	Quantity  int32
	Trigger   string
}

func (q *Queries) CreateHisBuy(ctx context.Context, arg CreateHisBuyParams) (HisBuy, error) {
	row := q.db.QueryRowContext(ctx, createHisBuy,
		arg.TaskID,
		arg.AccountID,
		arg.Symbol,
		arg.BuyPrice,
		arg.Quantity,
		arg.Trigger,
	)
	var i HisBuy
	err := row.Scan(
		&i.TaskID,
		&i.Symbol,
		&i.AccountID,
		&i.BuyPrice,
		&i.Quantity,
		&i.Trigger,
		&i.CreatedAt,
	)
	return i, err
}

const createHisSell = `-- name: CreateHisSell :one
insert into his_sell (task_id,account_id,symbol,sell_price,quantity,income,"trigger")
values ($1,$2,$3,$4,$5,$6,$7)
RETURNING task_id, symbol, account_id, sell_price, quantity, income, trigger, created_at
`

type CreateHisSellParams struct {
	TaskID    string
	AccountID string
	Symbol    string
	SellPrice string
	Quantity  int32
	Income    string
	Trigger   string
}

func (q *Queries) CreateHisSell(ctx context.Context, arg CreateHisSellParams) (HisSell, error) {
	row := q.db.QueryRowContext(ctx, createHisSell,
		arg.TaskID,
		arg.AccountID,
		arg.Symbol,
		arg.SellPrice,
		arg.Quantity,
		arg.Income,
		arg.Trigger,
	)
	var i HisSell
	err := row.Scan(
		&i.TaskID,
		&i.Symbol,
		&i.AccountID,
		&i.SellPrice,
		&i.Quantity,
		&i.Income,
		&i.Trigger,
		&i.CreatedAt,
	)
	return i, err
}

const createNewAccount = `-- name: CreateNewAccount :one
insert into accountinfo (account_id,balance) values ($1,$2)
on conflict do nothing
RETURNING account_id, balance, created_at, version
`

type CreateNewAccountParams struct {
	AccountID string
	Balance   string
}

func (q *Queries) CreateNewAccount(ctx context.Context, arg CreateNewAccountParams) (Accountinfo, error) {
	row := q.db.QueryRowContext(ctx, createNewAccount, arg.AccountID, arg.Balance)
	var i Accountinfo
	err := row.Scan(
		&i.AccountID,
		&i.Balance,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const createNewTask = `-- name: CreateNewTask :one
insert into processing_task (task_id,account_id,symbol)
values ($1,$2,$3)
RETURNING account_id, task_id, symbol, created_at
`

type CreateNewTaskParams struct {
	TaskID    string
	AccountID string
	Symbol    string
}

func (q *Queries) CreateNewTask(ctx context.Context, arg CreateNewTaskParams) (ProcessingTask, error) {
	row := q.db.QueryRowContext(ctx, createNewTask, arg.TaskID, arg.AccountID, arg.Symbol)
	var i ProcessingTask
	err := row.Scan(
		&i.AccountID,
		&i.TaskID,
		&i.Symbol,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec

delete FROM accountinfo where account_id=$1
RETURNING account_id, balance, created_at, version
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccountTaskStatus = `-- name: GetAccountTaskStatus :many
select account_id, task_id, symbol, created_at from processing_task
where account_id=$1
`

func (q *Queries) GetAccountTaskStatus(ctx context.Context, accountID string) ([]ProcessingTask, error) {
	rows, err := q.db.QueryContext(ctx, getAccountTaskStatus, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessingTask
	for rows.Next() {
		var i ProcessingTask
		if err := rows.Scan(
			&i.AccountID,
			&i.TaskID,
			&i.Symbol,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskBuyPrice = `-- name: GetTaskBuyPrice :one
select buy_price
from his_buy
where task_id=$1
`

func (q *Queries) GetTaskBuyPrice(ctx context.Context, taskID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTaskBuyPrice, taskID)
	var buy_price string
	err := row.Scan(&buy_price)
	return buy_price, err
}

const queryBalance = `-- name: QueryBalance :one
SELECT balance FROM accountinfo
where account_id = $1
`

func (q *Queries) QueryBalance(ctx context.Context, accountID string) (string, error) {
	row := q.db.QueryRowContext(ctx, queryBalance, accountID)
	var balance string
	err := row.Scan(&balance)
	return balance, err
}

const updateHoldSymbolStatus = `-- name: UpdateHoldSymbolStatus :one
insert into hold_symbol (account_id,symbol,quantity)
values ($1,$2,$3)
on conflict (symbol) do update
set quantity = hold_symbol.quantity + $3
RETURNING account_id, symbol, quantity, created_at
`

type UpdateHoldSymbolStatusParams struct {
	AccountID string
	Symbol    string
	Quantity  int32
}

func (q *Queries) UpdateHoldSymbolStatus(ctx context.Context, arg UpdateHoldSymbolStatusParams) (HoldSymbol, error) {
	row := q.db.QueryRowContext(ctx, updateHoldSymbolStatus, arg.AccountID, arg.Symbol, arg.Quantity)
	var i HoldSymbol
	err := row.Scan(
		&i.AccountID,
		&i.Symbol,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const get_version = `-- name: get_version :one
select version from accountinfo where account_id=$1
`

func (q *Queries) get_version(ctx context.Context, accountID string) (int32, error) {
	row := q.db.QueryRowContext(ctx, get_version, accountID)
	var version int32
	err := row.Scan(&version)
	return version, err
}
